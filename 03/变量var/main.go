package main

import "fmt"

/**
【变量】【字符串拼接】
	使用注意事项
		变量表示内存中的一个存储区域
		该区域有自己的名称（变量名）和类型（数据类型）
		go变量使用的三种方式
			1.第一种指定变量类型 声明后如不赋值，使用默认值
			2.第二种根据值自行判定变量类型（类型推导）
			3.第三种，省略var，注意 := 左侧的变量不应该是已经声明过的，否则会导致编译错误

		多变量声明：一次声明多个变量
		该区域的数据值可以在同一类型范围内不断变化
		变量在同一作用域（在一个函数或在代码块）内不能重名
		变量=变量名+数据类型+值
		变量没有赋初值，int默认0  string 默认空串 小数默认0

*/

/**
声明多个全局变量(在go中函数外部定义变量就是全局变量)
*/
// 多次声明
var g1 = 100
var g2 = "jack"

// 一次性声明
var (
	g3 = 300
	g4 = "tom"
)

func main() {
	// 定义变量/声明变量
	var i int
	// 给 i 赋值
	i = 10
	// 使用变量
	fmt.Println("i=", i)

	// 1.第一种指定变量类型 声明后如不赋值，使用默认值
	// int 的默认值是0
	var a int
	fmt.Println("a=", a)

	// 2.第二种根据值自行判定变量类型（类型推导）
	var b = 10.11
	fmt.Println("b=", b)

	// 3.第三种，省略var，注意 := 左侧的变量不应该是已经声明过的，否则会导致编译错误
	c := "tom" // 等价 var c string  c = "tom"
	// :=的:不可省略
	fmt.Println("name=", c)

	// 一次性声明多个变量
	var n1, n2, n3 int // 相同变量类型
	fmt.Println(n1, n2, n3)
	var d, e, f = 100, "tom", 10.11 // 不同变量类型
	fmt.Println(d, e, f)
	// 简写
	d1, e1, f1 := 100, "tom", 10.11
	fmt.Println(d1, e1, f1)
	// 引用全局变量
	fmt.Println(g1, g2, g3, g4)

	//该区域的数据值可以在同一类型范围内不断变化
	var l int = 10
	l = 30
	fmt.Println(l) // 函数内变量只能在函数内使用 可以改变值 但不能改变数据类型
	// l =1.2 报错 改变数据类型

	// 变量在同一作用域（在一个函数或在代码块）内不能重名
	// var l int =50 报错

	/**
	+ 号
	当左右两边都是数值型时，则做加法运算
	当左右两边都是字符串时，则做字符串拼接
	*/

	var num1 = 1
	var num2 = 2
	fmt.Println(num1 + num2) //加法运算

	var s1 = "hello"
	var s2 = "world"
	fmt.Println(s1 + s2) // 字符串拼接
}
