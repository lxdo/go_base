package main

import "fmt"

/**
字符类型（char）
go中没有专门的字符类型，如果要存储单个字符（字母），一般使用byte（0-255）来保存

字符串就是一串固定长度的字符连接起来的字符序列。go的字符串是由单个字节连接起来的
也就是说对于传统的字符串是由字符组成的，而go的字符串不同，它是由字节组成的

*/
/**'
说明
	如果我们保存的字符在ASCII表的，比如[0-1,a-z,A-Z...]直接可以保存在byte
	如果我们保存的字符对应码值大于255，这时我们可以考虑使用int类型保存
	如果我们需要按照字符方式输出，我们需要格式化输出，即fmt.Printf("%c",c1)
*/

/**
字符类型使用细节
	1.字符常量是用单引号('')括起来的单个字符。
		例如  var c1 byte ='a'
			 var c2 int = '中'
			 var c3 byte = '9'
	2.go中允许使用转义字符'\' 来将其后的字符转变为特殊字符型常量。
		例如：var c3 char = '\n'  '\n'表示换行符
	3.go语言的字符使用utf-8编码 英文字母1个字节 汉字3个字节
	4.在go中，字符的本质是一个整数，直接输出时，是该字符对应的utf-8编码的码值
	5.可以直接给某个变量赋一个数字，然后按格式化输出时%c,会输出该数字对应的Unicode字符
	6.字符类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码
*/

// 演示go中字符类型使用
func main() {
	var c1 byte = 'a'
	var c2 byte = '0' // 字符的0
	// 当我们直接输出byte值，就是输出了对应字符的码值
	// a=>97 0=>48
	fmt.Println("c1=", c1) // c1 =97
	fmt.Println("c2=", c2) // c2 =48
	// 如果我们希望输出对应字符，需要使用格式化输出
	fmt.Printf("c1=%c c2=%c \n", c1, c2)

	// var c3 byte = '北' overflow 溢出报错 （byte 0-255）
	var c3 int = '北'
	fmt.Printf("c3=%c c3对应的码值=%d \n", c3, c3)

	// 可以直接给某个变量赋一个数字，然后按格式化输出时%c,会输出该数字对应的Unicode字符
	var c4 int = 22269 // ASCII => utf8  22269 => 国
	fmt.Printf("c4=%c \n", c4)

	// 字符类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码
	// 运算时是按照码值运算

	var n1 = 10 + 'a' // 10 + 97 = 107
	fmt.Printf("n1=%c n1对应的码值=%d \n", n1, n1)


	// 字符类型本质探讨
	/*
	 字符型存储到计算机中，需要将字符对应的码值（整数）找出来
	 存储: 字符-》对应码值-》二进制-》存储
	 读取: 二进制-》码值-》字符-》读取
	 */
	/**
	字符和码值的对应关系是通过字符编码表决定的（是规定好的）
	 */
	/**
	go语言的编码都统一成了utf8。非常方便统一，没有编码乱码的困扰
	 */


}
