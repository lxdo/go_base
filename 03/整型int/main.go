package main

//  多个包引用方式
import (
	"fmt"
	"unsafe"
)

// 【数据类型】【int】
/**
类型     有无符号  占用存储空间     表数范围               备注

int8       有        1字节       -128-127
int16      有        2字节       -2^15-2^15-1
int32      有        4字节       -2^31-2^31-1
int64      有        8字节       -2^63-2^63-1

uint8      无        1字节        0-255
uint16     无        2字节        0-2^16-1
uint32     无        4字节        0-2^32-1
int64      无        8字节        0-2^64-1


int        有      32为系统4个字节  -2^31-2^31-1
                   64位系统8个字节  -2^63-2^63-1

uint       无      32位系统4个字节  0-2^32-1/
                   64位系统8个字节  0-2^64-1

rune       有       与int32一样    -2^31-2^31-1   等价int32，表示一个Unicode码
byte       无       与uint8等价       0-255       当要存储字符时选用byte
*/
func main() {
	// 整型的使用细节
	var n1 = 100
	// 如何查看变量的数据类型 n1是什么类型
	fmt.Printf(" n1的类型 %T", n1) // 可以用于做格式化输出 数值对应填充
	// 如何在程序查看变量的占用字节大小和数据类型 (使用较多)
	// unsafe.Sizeof(n1) 是unsafe包的一个函数 ，可以返回变量占用字节数
	fmt.Printf(" n1的类型 %T 占用字节数 %d", n1, unsafe.Sizeof(n1))
	// 整型变量在使用时，遵守保小不保大的原则。即：在保证程序正确运行下，尽量使用占用空间小的数据类型
	var age byte = 90
	fmt.Printf(" age的类型%T 占用字节数 %d", age, unsafe.Sizeof(age))

	// bit : 计算机中的最小存储单位  byte：计算机中基本存储单元  1byte = 8bit

}
