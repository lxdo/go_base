package main

import "fmt"

/**
二维数组

	使用方式:
		1)先声明/定义,再赋值
		语法:var 数组名 [大小][大小]类型
		比如:var arr [2][3]int , 再赋值  // 二维数组arr中有2个一维数组,每个一维数组有3个元素
		2)直接初始化
			(1)声明: var 数组名 [大小][大小]类型 = [大小][大小]类型{{元素,元素,...},{元素,元素,...},{元素,元素,...}}
			(2)赋值(有默认值,比如int类型默认0)
			(3)二维数组在声明/定义时也对应有四种写法(和一维数组类似)
			var 数组名 [大小][大小]类型 = [大小][大小]类型{{元素,元素,...},{元素,元素,...},{元素,元素,...}}
			var 数组名 [大小][大小]类型 = [...][大小]类型{{元素,元素,...},{元素,元素,...},{元素,元素,...}}
			var 数组名  = [大小][大小]类型{{元素,元素,...},{元素,元素,...},{元素,元素,...}}
			var 数组名  = [...][大小]类型{{元素,元素,...},{元素,元素,...},{元素,元素,...}}

	二维数组的遍历:
		1) 双层for循环完成遍历
		2) for range方式完成遍历
*/

func main() {
	/**
	入门案例:
		使用二维数组输出如下图形

		0 0 0 0 0 0
		0 0 1 0 0 0
		0 2 0 3 0 0
		0 0 0 0 0 0
	*/

	// 定义二维数组
	var arr [4][6]int        // 二维数组中有4个一维数组,每个一维数组有6个元素
	fmt.Println("arr=", arr) // 定义未赋值 二维数组中每个一维数组的元素默认0

	// 给二维数组中一维数组的元素赋值
	// arr[一维数组的下标][一维数组中元素的下标]
	arr[1][2] = 1
	arr[2][1] = 2
	arr[2][3] = 3

	// 遍历二维数组
	for _, v := range arr { // 得出每一个一维数组
		for _, value := range v {
			fmt.Print(value, " ") // 得出一维数组中每个元素
		}
		fmt.Println()
	}

	// 二维数组使用方式
	// 1)先声明/定义,再赋值
	var arr2 [2][3]int
	fmt.Printf("arr2[0]的地址是 %p \n", &arr2[0])
	fmt.Printf("arr2[1]的地址是 %p \n", &arr2[1])
	// arr2[0]和arr[1]地址相差24个字节 因为arr2每一个一维数组有3个元素，元素数据类型为int,占8个字节,每个一维数组占24个字节
	// 二维数组中相邻两个一维数组地址相差字节,就是一维数组所占字节数

	fmt.Printf("arr2[0][0]的地址是 %p \n", &arr2[0][0]) // &arr2[0][0] = &arr2[0]
	fmt.Printf("arr2[1][0]的地址是 %p \n", &arr2[1][0]) // &arr2[1][0] = &arr2[1]
	// 二维数组每个一维数组的地址=每个一维数组首地址(第一个元素的地址)

	// 2)直接初始化
	var arr3 [2][3]int = [2][3]int{{1, 2, 3}, {4, 5, 6}}
	fmt.Println("arr3=", arr3)

	// 二维数组在声明/定义时也对应有四种写法(和一维数组类似)
	// var 数组名 [大小][大小]类型 = [大小][大小]类型{{元素,元素,...},{元素,元素,...},{元素,元素,...}}
	var arr4 [2][3]int = [2][3]int{{1, 2, 3}, {4, 5, 6}}
	fmt.Println("arr4=", arr4)
	// var 数组名 [大小][大小]类型 = [...][大小]类型{{元素,元素,...},{元素,元素,...},{元素,元素,...}}
	var arr5 [2][3]int = [...][3]int{{1, 2, 3}, {4, 5, 6}}
	fmt.Println("arr5=", arr5)
	// var 数组名  = [大小][大小]类型{{元素,元素,...},{元素,元素,...},{元素,元素,...}}
	var arr6 = [2][3]int{{1, 2, 3}, {4, 5, 6}}
	fmt.Println("arr6=", arr6)
	// var 数组名  = [...][大小]类型{{元素,元素,...},{元素,元素,...},{元素,元素,...}}
	var arr7 = [...][3]int{{1, 2, 3}, {4, 5, 6}}
	fmt.Println("arr7=", arr7)

	// 二维数组的遍历
	// 1) 双层for循环完成遍历
	for i := 0; i < len(arr7); i++ { // 获取每个一维数组
		for j := 0; j < len(arr7[i]); j++ { // 获取一维数组每个元素
			fmt.Printf("%v ", arr7[i][j])
		}
		fmt.Println()
	}
	// 2) for range方式完成遍历
	for _, v := range arr7 { // 获取每个一维数组
		for _, value := range v { // 获取一维数组每个元素
			fmt.Printf("%v ", value)
		}
		fmt.Println()
	}

	
}
