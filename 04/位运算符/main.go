package main

import "fmt"

/**
位运算

*/

/**
二进制在运算中的说明：
	二进制是逢2进位的进位制，0，1是基本算符
	现代的电子计算机技术全部采用的是二进制，因为它只使用0,1两个数字符号,非常简单方便
	易于用电子方式实现。计算机内部处理的信息，都是采用二进制数来表示的。二进制数用0
	和1两个数字及其组合来表示任何数。进位规则时"逢2进1"，数字1在不同的位上代表不同的值
	按从右至左的次序，这个值以二倍递增

	在计算机的内部，运行各种计算时，都是以二进制的方式来运行
*/

/**
原码、反码、补码

	对于有符号的而言:
		1) 二进制的最高位(左边第一位)是符号位：0表示正数，1表示负数
			 var a byte = 1  // byte对应8字节
			1(十进制) (byte) => 0 0000001 (二进制)  (8个字节) 左边第一位0表示正数
			 var b byte = -1  // byte对应8字节
			-1(十进制) (byte) => 1 0000001 (二进制)  (8个字节) 左边第一位1表示负数

		2) 正数的原码、反码、补码都一样
		3) 负数的反码=它的原码符号位不变，其它位取反(0=>1 1=>0)
		4) 负数的补码=它的反码+1
			1=> 原码 0000 0001 反码 0000 0001 补码 0000 0001
           -1=> 原码 1000 0001 反码 1111 1110 补码 1111 1111
		5) 0的反码，补码都是0
		6) 在计算机运算的时候，都是以补码的方式来运算的
			计算机里没有减法   1-1 在计算机是 1+(-1)

*/

/**
位运算符
	3个位运算(用数的二进制补码进行运算)
	按位与 & : 两位全为1 结果为1 否则为0
	按位或 | : 两位有一个为1 结果为1 否则为0
	按位异或 ^ : 两位一个为0，一个为1，结果为1，否则为0

	例：	2&3
		= 	0000 0010 (2的补码)
			0000 0011 (3的补码)
		=   0000 0010   (两位全为1 结果为1 否则为0) (二进制)
		=   2  (十进制)

			2|3
		= 	0000 0010 (2的补码)
			0000 0011 (3的补码)
		=	0000 0011 (两位有一个为1 结果为1 否则为0) (二进制)
		=	3 (十进制)

			2^3
		= 	0000 0010 (2的补码)
			0000 0011 (3的补码)
		=	0000 0001 (两位一个为0，一个为1，结果为1，否则为0) (二进制)
		=	1 （十进制)

			-2^2
			-2的原码 1000 0010
			-2的反码 1111 1101
		=>	1111 1110 (-2的补码) 以补码参与运算
			0000 0010 (2的补码)
			(两位一个为0，一个为1，结果为1，否则为0) (二进制)
		=	1111 1100 结果仍然为补码 负数(左边第一位为1)原码和补码不同 所以还需要转换
		=>	1111 1100 -1 // 先推算成反码
		=>	1111 1011 (反码)
			符号位不变 其它位取反
		= 	1000 0100 (原码) (二进制)
		=	-4 (十进制)


*/

/**
移位运算符
	2个移位运算符
	规则：
	右移运算符 >> : 低位溢出，符号位不变，并用符号位补溢出的高位
	左移运算符 << : 符号位不变 ,低位补0

	还是以补码的方式运算

	例：
			1>>2
			0000 0001 (1的补码)
		=>  0000 0000 (二进制)	右移两位，低位溢出，符号位不变，用符号位补溢出的高位
		=	0 (十进制)

			1<<2
			0000 0001 (1的补码)
		=> 	0000 0100 (二进制) 左移两位，符号位不变 ,低位补0
		=	4 (十进制)

 */
func main() {
	// 下面 a,b,c,f结果是多少
	var a int = 1 >> 2
	var b int = -1 >> 2
	var c int = 1 << 2
	var d int = -1 << 2

	fmt.Printf("a = %v b = %v c = %v d = %v \n", a, b, c, d)

	// 下面表达式运算结果是
	fmt.Println("2&3= ", 2&3)
	fmt.Println("2|3= ", 2|3)
	fmt.Println("2^3= ", 2^3)
	fmt.Println("-2^2= ", -2^2)
}
