package main

import "fmt"

/**
算术运算符
	介绍：算术运算符是对数值类型的变量进行运算的 比如加减乘除
*/
func main() {
	//  /的使用  说明：如果运算的数都是整数，那么除后，去掉小数部分，保留整数部分
	// 由参与运算的数的数据类型决定结果的数据类型
	fmt.Println("10/4 = ", 10/4) // 2
	// 用float类型接收还是会去掉小数部分
	var n1 float32 = 10 / 4
	fmt.Println("n1 = ", n1)
	//  如果我们希望保留小数部分，则需要有浮点数参与运算
	var n2 float32 = 10.0 / 4
	fmt.Println("n2 = ", n2)

	//  %的使用  公式：a % b = a - a/b *b
	fmt.Println("10%3 = ", 10%3)     // =10-10/3*3 = 10-3*3 =10-9 =1
	fmt.Println("-10%3 = ", -10%3)   // =-10-(-10)/3*3=-10-(-3)*3=-10+9=-1
	fmt.Println("10%-3 = ", 10%-3)   // =10-10/(-3)*(-3)=10-(-3)*(-3)=10-9=1
	fmt.Println("-10%-3 = ", -10%-3) // =-10-(-10)/(-3)*(-3)=-10-3*(-3)=-10+9=-1

	// ++ 和--的使用
	var a int = 10
	a++                  // 等价 a=a+1
	fmt.Println("a=", a) // 11
	a--                  // 等价 a=a-1
	fmt.Println("a=", a) // 10

	/*
		 注意细节
		1) 对于除号 "/" 它的整数除和小数除是有区别的，整数之间做除法时，只保留整数部分 而舍弃小数部分
		例如：x:=19/5 结果是3
		2) 当对一个数取模时，可以等价 a%b=a-a/b*b ,这样我们可以看到取模的一个本质运算
		3) go的自增自减只能当做一个独立语言使用，不能这样使用 b:=a++ 或者 b:=a--
		4) go的++ 和 -- 只能写在变量的后面 ，不能写在变量的前面 即：只有 a++ ,a-- 没有++a 和--a
	*/

	// go的自增自减只能当做一个独立语言使用，不能这样使用 b:=a++ 或者 b:=a--
	// b:=a++ 错误 a++只能独立使用
	// b:=a-- 错误 a--只能独立使用

	// 可以写成这样
	a++    // 11
	b := a // 赋值
	fmt.Println("b=", b)

	// ++a 错误 没有前++
	// --a 错误 没有前--

	// 练习
	// 1.假如还有97天放假 问：还有xx个星期零xx天
	var days int = 97
	var week int = days / 7
	var day int = days % 7
	fmt.Printf("%d个星期零%d天 \n", week, day)


}
